statefulset:
  enabled: true
replicaCount: 1
deploymentStrategy: {}

namespace: 
  enabled: true
  name: nexus

nexus:
  imageName: # insert the link of the container registery where you have pushed the nexus image
  imageTag: latest
  env:
    - name: INSTALL4J_ADD_VM_PARAMS
      value: "-Xms1200M -Xmx1200M -XX:MaxDirectMemorySize=2G -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
  resources:
    limits:
      memory: "4Gi"
      cpu: "1000m"
    requests:
      memory: "2Gi"
      cpu: "500m"
  nexusPort: 8081
  dockerPort: 1111
  annotations: 
    iam.amazonaws.com/role: arn:aws:iam::<aws-account-number>:role/terraform-<environment-name>-eks-container-role-nexus ## insert the account no. of the AWS account on which the cluster has been deployed. The iam role will be created with the environment name appended to it. Insert the environment name here
  podAnnotations: {}
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 30
    failureThreshold: 6
    path: /
  readinessProbe:
    initialDelaySeconds: 30
    periodSeconds: 30
    failureThreshold: 6
    path: /
  hostAliases: []

persistence:
  enabled: true
  accessMode: ReadWriteOnce
  storageClass: storageclass-nexus
  # existingClaim: 
  storageSize: 15Gi
  storageType: gp2

tolerations: []

deployment:
  annotations: {}
  # # Add init containers. e.g. to be used to give specific permissions for nexus-data.
  initContainers:
  - name: restore-container
    image: # insert the link of the container registery where you have pushed the awsCli image
    resources:
      limits:
        memory: "4Gi"
        cpu: "1000m"
      requests:
        memory: "2Gi"
        cpu: "500m"
    ports:
      - containerPort: 80
    volumeMounts:
      - name: nexus-data
        mountPath: /nexus-data
    args:
    - "s3"
    - "sync"
    - "s3://<name-of-s3-bucket>" ## insert the name of the s3 bucket from which you need to get the backup data
    - "/nexus-data/s3Backup"
  
  postStart:
    command: '["/bin/bash", "-c", "sleep 120 && rm -rf /nexus-data/db/config /nexus-data/db/security /nexus-data/db/component && cp /nexus-data/s3Backup/db/*.bak /nexus-data/restore-from-backup/ && rm -rf /nexus-data/blobs/* && cp -r /nexus-data/s3Backup/blobs/* /nexus-data/blobs/ && mkdir /nexus-service && mv -f /etc/service/nexus/* /nexus-service/ && pkill java && sleep 5 && mv /nexus-service/* /etc/service/nexus/ && /etc/service/nexus/nexus/run || true"]'
  additionalContainers:
  additionalVolumes:
  additionalVolumeMounts:

# # To use an additional service, set enable to true
service:
  name: nexus-service-lb
  namespace: nexus
  enabled: true
  serviceType: ClusterIP
  labels: {}
  ports:
  - name: nexus-service
    targetPort: 8081
    port: 8081
  - name: docker-port1
    targetPort: 1111
    port: 1111
  - name: docker-port2
    targetPort: 2222
    port: 2222
  - name: docker-port3
    targetPort: 3333
    port: 3333

eks:
  aws_account: "<aws-account-number>" # the account no. of the AWS account on which the cluster has been deployed
  roleName: terraform-<insert-environment-name-here>-eks-container-role-nexus # The role will be created with the environment name appended to it. Insert the environment name here

volume:
  mountPath: /nexus-data
  mountName: nexus-data


ingress:
  ## Set to true to enable ingress record generation
  enabled: true

  ## Set this to true in order to add the corresponding annotations for cert-manager
  certManager: false

  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/annotations.md
  ##
  ## If tls is set to true, annotation ingress.kubernetes.io/secure-backends: "true" will automatically be set
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  annotations:
   kubernetes.io/ingress.class: nginx

  ## The list of hostnames to be covered with this ingress record.
  ## Most likely this will be just one host, but in the event more hosts are needed, this is an array
  hosts:
  ## Insert the name of the host here if ingress is set to 'true'
  - name: ## registry-dr.guidespark.net 
    path: /

    name2: docker-dr.guidespark.net

    ## Set this to true in order to enable TLS on the ingress record
    tls: false

    ## Optionally specify the TLS hosts for the ingress record
    ## Useful when the Ingress controller supports www-redirection
    ## If not specified, the above host name will be used
    tlsHosts:
    # - registry-dr.guidespark.net
    # - docker-dr.guidespark.net
    # - nexus.scaleops.info/docker1

    ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
    # tlsSecret: nexus.local-tls

    # name2: docker.scaleops.info

  secrets:
  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  # - name: suitecrm.local-tls
  #   key:
  #   certificate:
